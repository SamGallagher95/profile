#!/usr/bin/env bash

PURPLE="\\033[0;35m"
WHITE="\\033[0m"


checkPorcelain(){
    porcelain=$(git status --porcelain 2>/dev/null)
    porcelainlist=$(awk '{print $NF}' <<< "$porcelain")
}

checkModified(){
    echo -e "$porcelain" | grep "^ \\|^MM" | awk '{print $NF}'
}

checkUntracked(){
    grep "^??" <<< "$porcelain" | awk '{print $NF}'
}

commitChanges(){
    read -rp "$(header 'Commit changes? [Y/n/a]mend to previous commit, or enter commit message') " answer
    case "$answer" in
        "") git commit -v ;;
        [Yy] ) git commit -v ;;
        [Aa] ) git commit --amend ;;
        [Nn] ) exit 1 ;;
        *) git commit -m "$answer" ;;
    esac
    echo
}

fullStatus(){
    checkPorcelain
    if [ -z "$porcelain" ]; then
        header "Git Show - Latest Commit"
        gitcheck show
        echo
    else
        header "Git Diff/Staged"
        gitcheck diff HEAD
        echo
    fi
    header "Git Status"
    gitcheck status
    echo
    [ "$porcelain" ] \
    && header "Porcelain Status" \
    && echo -e "$porcelain"
    showPreviousCommit
}

gitcheck(){
    git -c color."$1"=always --no-pager "$@"
}

header(){
    echo -e "[${PURPLE}${1}${WHITE}]"
}

main(){
    checkPorcelain
    if [ -z "$porcelain" ]; then
        header "No modified or untracked files, showing latest commit on branch"
        git --no-pager log -1 --oneline --decorate
        return 1
    else
        if [ "$TO_STAGE" ]; then # stage files if specified
            TO_STAGE="$*"
        else # stage all porcelain files if none specified
            TO_STAGE="."
        fi
        stageFiles "$TO_STAGE"
        checkPorcelain
        showPreviousCommit
        commitChanges
        fullStatus
    fi
}

showPreviousCommit(){
    header "Previous Git Commit"
    git --no-pager log -1 --oneline --decorate
    echo
}

stageFiles(){
    header "Staging Modified/Untracked Files"
    if [ "$TO_STAGE" = "." ]; then
        git add --patch .
    else
        modified=$(checkModified)
        while read -r line; do
            grep -w "$line" <<< "$TO_STAGE" >/dev/null && \
                staging_modified+="$line "
        done <<< "$modified"
    fi
    [ "$staging_modified" ] && \
        git add --patch $staging_modified 2>/dev/null # git 128 error if quoted

    untracked=$(checkUntracked)
    while read -r line; do
        grep -w "$line" <<< "$TO_STAGE" >/dev/null && \
            staging_untracked+="$line "
    done <<< "$untracked"
    [ "$staging_untracked" ] && \
        git add $staging_untracked 2>/dev/null # git 128 error if quoted
}


main "$TO_STAGE"
